
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002700  08002700  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002700  08002700  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002700  08002700  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000024  0800272c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800272c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086ac  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001955  00000000  00000000  000286f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a3c  00000000  00000000  0002b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afaa  00000000  00000000  00041dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820a4  00000000  00000000  0004cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cee12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000cee64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080026c8 	.word	0x080026c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080026c8 	.word	0x080026c8

0800014c <key1Process>:
int keyReg1[NO_BUTTONS];
int keyReg2[NO_BUTTONS];
int keyReg3[NO_BUTTONS];
int timerForKeyPress = TIME_CHANGE_TO_AUTO;

void key1Process() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	turn_off_all_singleLed();
 8000150:	f000 fc10 	bl	8000974 <turn_off_all_singleLed>
	turn_off_all_7seg();
 8000154:	f000 fd20 	bl	8000b98 <turn_off_all_7seg>
	turn_on_7seg(2);
 8000158:	2002      	movs	r0, #2
 800015a:	f000 fd2b 	bl	8000bb4 <turn_on_7seg>
	turn_on_7seg(3);
 800015e:	2003      	movs	r0, #3
 8000160:	f000 fd28 	bl	8000bb4 <turn_on_7seg>
	switch(status) {
 8000164:	4b1d      	ldr	r3, [pc, #116]	; (80001dc <key1Process+0x90>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b07      	cmp	r3, #7
 800016a:	d013      	beq.n	8000194 <key1Process+0x48>
 800016c:	2b07      	cmp	r3, #7
 800016e:	dc26      	bgt.n	80001be <key1Process+0x72>
 8000170:	2b05      	cmp	r3, #5
 8000172:	d002      	beq.n	800017a <key1Process+0x2e>
 8000174:	2b06      	cmp	r3, #6
 8000176:	d01a      	beq.n	80001ae <key1Process+0x62>
 8000178:	e021      	b.n	80001be <key1Process+0x72>
	case MODE_RED:
		GPIOA->ODR &= ~(0x9<<5);
 800017a:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <key1Process+0x94>)
 800017c:	68db      	ldr	r3, [r3, #12]
 800017e:	4a18      	ldr	r2, [pc, #96]	; (80001e0 <key1Process+0x94>)
 8000180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000184:	60d3      	str	r3, [r2, #12]
		status = MODE_YELLOW;
 8000186:	4b15      	ldr	r3, [pc, #84]	; (80001dc <key1Process+0x90>)
 8000188:	2207      	movs	r2, #7
 800018a:	601a      	str	r2, [r3, #0]
		set_timer(DURATION_MANUAL);
 800018c:	2064      	movs	r0, #100	; 0x64
 800018e:	f000 fe53 	bl	8000e38 <set_timer>
		break;
 8000192:	e021      	b.n	80001d8 <key1Process+0x8c>
	case MODE_YELLOW:
		GPIOA->ODR &= ~(0x9<<4);
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <key1Process+0x94>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <key1Process+0x94>)
 800019a:	f023 0390 	bic.w	r3, r3, #144	; 0x90
 800019e:	60d3      	str	r3, [r2, #12]
		status = MODE_GREEN;
 80001a0:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <key1Process+0x90>)
 80001a2:	2206      	movs	r2, #6
 80001a4:	601a      	str	r2, [r3, #0]
		set_timer(DURATION_MANUAL);
 80001a6:	2064      	movs	r0, #100	; 0x64
 80001a8:	f000 fe46 	bl	8000e38 <set_timer>
		break;
 80001ac:	e014      	b.n	80001d8 <key1Process+0x8c>
	case MODE_GREEN:
		status = STATE0;
 80001ae:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <key1Process+0x90>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
		set_timer(DURATION);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f000 fe3e 	bl	8000e38 <set_timer>
		break;
 80001bc:	e00c      	b.n	80001d8 <key1Process+0x8c>
	default:
		GPIOA->ODR &= ~(0x9<<3);
 80001be:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <key1Process+0x94>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <key1Process+0x94>)
 80001c4:	f023 0348 	bic.w	r3, r3, #72	; 0x48
 80001c8:	60d3      	str	r3, [r2, #12]
		status = MODE_RED;
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <key1Process+0x90>)
 80001cc:	2205      	movs	r2, #5
 80001ce:	601a      	str	r2, [r3, #0]
		set_timer(DURATION_MANUAL);
 80001d0:	2064      	movs	r0, #100	; 0x64
 80001d2:	f000 fe31 	bl	8000e38 <set_timer>
		break;
 80001d6:	bf00      	nop
	}

}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	40010800 	.word	0x40010800

080001e4 <key2Process>:

void key2Process() {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	switch(status) {
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <key2Process+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b07      	cmp	r3, #7
 80001ee:	d00a      	beq.n	8000206 <key2Process+0x22>
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	dc10      	bgt.n	8000216 <key2Process+0x32>
 80001f4:	2b05      	cmp	r3, #5
 80001f6:	d002      	beq.n	80001fe <key2Process+0x1a>
 80001f8:	2b06      	cmp	r3, #6
 80001fa:	d008      	beq.n	800020e <key2Process+0x2a>
		break;
	case MODE_GREEN:
		set_led_duration(3);
		break;
	default:
		break;
 80001fc:	e00b      	b.n	8000216 <key2Process+0x32>
		set_led_duration(1);
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 fe50 	bl	8000ea4 <set_led_duration>
		break;
 8000204:	e008      	b.n	8000218 <key2Process+0x34>
		set_led_duration(2);
 8000206:	2002      	movs	r0, #2
 8000208:	f000 fe4c 	bl	8000ea4 <set_led_duration>
		break;
 800020c:	e004      	b.n	8000218 <key2Process+0x34>
		set_led_duration(3);
 800020e:	2003      	movs	r0, #3
 8000210:	f000 fe48 	bl	8000ea4 <set_led_duration>
		break;
 8000214:	e000      	b.n	8000218 <key2Process+0x34>
		break;
 8000216:	bf00      	nop
	}
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000070 	.word	0x20000070

08000220 <key3Process>:

void key3Process() {
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	if (status == MODE_RED || status == MODE_GREEN || status == MODE_YELLOW) {
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <key3Process+0x40>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b05      	cmp	r3, #5
 800022a:	d007      	beq.n	800023c <key3Process+0x1c>
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <key3Process+0x40>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b06      	cmp	r3, #6
 8000232:	d003      	beq.n	800023c <key3Process+0x1c>
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <key3Process+0x40>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b07      	cmp	r3, #7
 800023a:	d10d      	bne.n	8000258 <key3Process+0x38>
		status = STATE0;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <key3Process+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
		value0 = durationRed;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <key3Process+0x44>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <key3Process+0x48>)
 8000248:	6013      	str	r3, [r2, #0]
		value1 = durationGreen;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <key3Process+0x4c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a08      	ldr	r2, [pc, #32]	; (8000270 <key3Process+0x50>)
 8000250:	6013      	str	r3, [r2, #0]
		side = 0;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <key3Process+0x54>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
	}
	else ;
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000070 	.word	0x20000070
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000004 	.word	0x20000004
 800026c:	20000010 	.word	0x20000010
 8000270:	20000008 	.word	0x20000008
 8000274:	20000074 	.word	0x20000074

08000278 <getKeyInput>:

void getKeyInput() {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_BUTTONS; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e0b3      	b.n	80003ec <getKeyInput+0x174>
		keyReg0[i] = keyReg1[i];
 8000284:	4a5e      	ldr	r2, [pc, #376]	; (8000400 <getKeyInput+0x188>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	495d      	ldr	r1, [pc, #372]	; (8000404 <getKeyInput+0x18c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 8000294:	4a5c      	ldr	r2, [pc, #368]	; (8000408 <getKeyInput+0x190>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029c:	4958      	ldr	r1, [pc, #352]	; (8000400 <getKeyInput+0x188>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d021      	beq.n	80002ee <getKeyInput+0x76>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	dc29      	bgt.n	8000304 <getKeyInput+0x8c>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d003      	beq.n	80002be <getKeyInput+0x46>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d00c      	beq.n	80002d6 <getKeyInput+0x5e>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
			break;
		case 2:
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
		default:
			break;
 80002bc:	e022      	b.n	8000304 <getKeyInput+0x8c>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4852      	ldr	r0, [pc, #328]	; (800040c <getKeyInput+0x194>)
 80002c4:	f001 f9d8 	bl	8001678 <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4619      	mov	r1, r3
 80002cc:	4a4e      	ldr	r2, [pc, #312]	; (8000408 <getKeyInput+0x190>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002d4:	e017      	b.n	8000306 <getKeyInput+0x8e>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80002d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002da:	484c      	ldr	r0, [pc, #304]	; (800040c <getKeyInput+0x194>)
 80002dc:	f001 f9cc 	bl	8001678 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4a48      	ldr	r2, [pc, #288]	; (8000408 <getKeyInput+0x190>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002ec:	e00b      	b.n	8000306 <getKeyInput+0x8e>
			keyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80002ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002f2:	4846      	ldr	r0, [pc, #280]	; (800040c <getKeyInput+0x194>)
 80002f4:	f001 f9c0 	bl	8001678 <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4619      	mov	r1, r3
 80002fc:	4a42      	ldr	r2, [pc, #264]	; (8000408 <getKeyInput+0x190>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000304:	bf00      	nop
		}
		if ( (keyReg0[i]==keyReg1[i]) && (keyReg1[i]==keyReg2[i]) ) {
 8000306:	4a3f      	ldr	r2, [pc, #252]	; (8000404 <getKeyInput+0x18c>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800030e:	493c      	ldr	r1, [pc, #240]	; (8000400 <getKeyInput+0x188>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000316:	429a      	cmp	r2, r3
 8000318:	d165      	bne.n	80003e6 <getKeyInput+0x16e>
 800031a:	4a39      	ldr	r2, [pc, #228]	; (8000400 <getKeyInput+0x188>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	4939      	ldr	r1, [pc, #228]	; (8000408 <getKeyInput+0x190>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032a:	429a      	cmp	r2, r3
 800032c:	d15b      	bne.n	80003e6 <getKeyInput+0x16e>
			if (keyReg3[i]!=keyReg2[i]) {
 800032e:	4a38      	ldr	r2, [pc, #224]	; (8000410 <getKeyInput+0x198>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000336:	4934      	ldr	r1, [pc, #208]	; (8000408 <getKeyInput+0x190>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800033e:	429a      	cmp	r2, r3
 8000340:	d028      	beq.n	8000394 <getKeyInput+0x11c>
				keyReg3[i] = keyReg2[i];
 8000342:	4a31      	ldr	r2, [pc, #196]	; (8000408 <getKeyInput+0x190>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034a:	4931      	ldr	r1, [pc, #196]	; (8000410 <getKeyInput+0x198>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == PRESSED_STATE) {
 8000352:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <getKeyInput+0x190>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d143      	bne.n	80003e6 <getKeyInput+0x16e>
					switch(i) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d00f      	beq.n	8000384 <getKeyInput+0x10c>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b02      	cmp	r3, #2
 8000368:	dc0f      	bgt.n	800038a <getKeyInput+0x112>
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d003      	beq.n	8000378 <getKeyInput+0x100>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d003      	beq.n	800037e <getKeyInput+0x106>
						break;
					case 2:
						key3Process();
						break;
					default:
						break;
 8000376:	e008      	b.n	800038a <getKeyInput+0x112>
						key1Process();
 8000378:	f7ff fee8 	bl	800014c <key1Process>
						break;
 800037c:	e006      	b.n	800038c <getKeyInput+0x114>
						key2Process();
 800037e:	f7ff ff31 	bl	80001e4 <key2Process>
						break;
 8000382:	e003      	b.n	800038c <getKeyInput+0x114>
						key3Process();
 8000384:	f7ff ff4c 	bl	8000220 <key3Process>
						break;
 8000388:	e000      	b.n	800038c <getKeyInput+0x114>
						break;
 800038a:	bf00      	nop
					}
					timerForKeyPress = TIME_CHANGE_TO_AUTO;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <getKeyInput+0x19c>)
 800038e:	2264      	movs	r2, #100	; 0x64
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e028      	b.n	80003e6 <getKeyInput+0x16e>
				}
			}
			else {
				timerForKeyPress--;
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <getKeyInput+0x19c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3b01      	subs	r3, #1
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <getKeyInput+0x19c>)
 800039c:	6013      	str	r3, [r2, #0]
				if (timerForKeyPress==0) {
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <getKeyInput+0x19c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d11f      	bne.n	80003e6 <getKeyInput+0x16e>
					if (keyReg2[i]==PRESSED_STATE) {
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <getKeyInput+0x190>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d119      	bne.n	80003e6 <getKeyInput+0x16e>
						switch(i) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d00f      	beq.n	80003d8 <getKeyInput+0x160>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	dc0f      	bgt.n	80003de <getKeyInput+0x166>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <getKeyInput+0x154>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d003      	beq.n	80003d2 <getKeyInput+0x15a>
							break;
						case 2:
							key3Process();
							break;
						default:
							break;
 80003ca:	e008      	b.n	80003de <getKeyInput+0x166>
							key1Process();
 80003cc:	f7ff febe 	bl	800014c <key1Process>
							break;
 80003d0:	e006      	b.n	80003e0 <getKeyInput+0x168>
							key2Process();
 80003d2:	f7ff ff07 	bl	80001e4 <key2Process>
							break;
 80003d6:	e003      	b.n	80003e0 <getKeyInput+0x168>
							key3Process();
 80003d8:	f7ff ff22 	bl	8000220 <key3Process>
							break;
 80003dc:	e000      	b.n	80003e0 <getKeyInput+0x168>
							break;
 80003de:	bf00      	nop
						}
						timerForKeyPress = TIME_INCREASE_VALUE;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <getKeyInput+0x19c>)
 80003e2:	2232      	movs	r2, #50	; 0x32
 80003e4:	601a      	str	r2, [r3, #0]
	for (int i=0; i<NO_BUTTONS; i++) {
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	f77f af48 	ble.w	8000284 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000004c 	.word	0x2000004c
 8000404:	20000040 	.word	0x20000040
 8000408:	20000058 	.word	0x20000058
 800040c:	40010800 	.word	0x40010800
 8000410:	20000064 	.word	0x20000064
 8000414:	20000000 	.word	0x20000000

08000418 <fsm_automatic>:
int side = 0;

int value0 = 15;
int value1 = 12;

void fsm_automatic() {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	switch(status) {
 800041c:	4ba3      	ldr	r3, [pc, #652]	; (80006ac <fsm_automatic+0x294>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b03      	cmp	r3, #3
 8000422:	f200 81fe 	bhi.w	8000822 <fsm_automatic+0x40a>
 8000426:	a201      	add	r2, pc, #4	; (adr r2, 800042c <fsm_automatic+0x14>)
 8000428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042c:	0800043d 	.word	0x0800043d
 8000430:	08000529 	.word	0x08000529
 8000434:	0800061d 	.word	0x0800061d
 8000438:	08000731 	.word	0x08000731
	case STATE0:
		if (timerFlag==1) {
 800043c:	4b9c      	ldr	r3, [pc, #624]	; (80006b0 <fsm_automatic+0x298>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	f040 81f0 	bne.w	8000826 <fsm_automatic+0x40e>
			turn_off_all_singleLed();
 8000446:	f000 fa95 	bl	8000974 <turn_off_all_singleLed>
			GPIOA->ODR &= ~(0x11<<3);
 800044a:	4b9a      	ldr	r3, [pc, #616]	; (80006b4 <fsm_automatic+0x29c>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	4a99      	ldr	r2, [pc, #612]	; (80006b4 <fsm_automatic+0x29c>)
 8000450:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8000454:	60d3      	str	r3, [r2, #12]
			turn_off_all_7seg();
 8000456:	f000 fb9f 	bl	8000b98 <turn_off_all_7seg>
			if (side==0) {
 800045a:	4b97      	ldr	r3, [pc, #604]	; (80006b8 <fsm_automatic+0x2a0>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d129      	bne.n	80004b6 <fsm_automatic+0x9e>
				display_7SEG1(value0/10);
 8000462:	4b96      	ldr	r3, [pc, #600]	; (80006bc <fsm_automatic+0x2a4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a96      	ldr	r2, [pc, #600]	; (80006c0 <fsm_automatic+0x2a8>)
 8000468:	fb82 1203 	smull	r1, r2, r2, r3
 800046c:	1092      	asrs	r2, r2, #2
 800046e:	17db      	asrs	r3, r3, #31
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f000 faa8 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value0%10);
 8000478:	4b90      	ldr	r3, [pc, #576]	; (80006bc <fsm_automatic+0x2a4>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b90      	ldr	r3, [pc, #576]	; (80006c0 <fsm_automatic+0x2a8>)
 800047e:	fb83 1302 	smull	r1, r3, r3, r2
 8000482:	1099      	asrs	r1, r3, #2
 8000484:	17d3      	asrs	r3, r2, #31
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	460b      	mov	r3, r1
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	440b      	add	r3, r1
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	1ad1      	subs	r1, r2, r3
 8000492:	4608      	mov	r0, r1
 8000494:	f000 fb0c 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(0);
 8000498:	2000      	movs	r0, #0
 800049a:	f000 fb8b 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fb88 	bl	8000bb4 <turn_on_7seg>
				side = 1;
 80004a4:	4b84      	ldr	r3, [pc, #528]	; (80006b8 <fsm_automatic+0x2a0>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
				value0--;
 80004aa:	4b84      	ldr	r3, [pc, #528]	; (80006bc <fsm_automatic+0x2a4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	4a82      	ldr	r2, [pc, #520]	; (80006bc <fsm_automatic+0x2a4>)
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e033      	b.n	800051e <fsm_automatic+0x106>
			}
			else {
				display_7SEG1(value1/10);
 80004b6:	4b83      	ldr	r3, [pc, #524]	; (80006c4 <fsm_automatic+0x2ac>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a81      	ldr	r2, [pc, #516]	; (80006c0 <fsm_automatic+0x2a8>)
 80004bc:	fb82 1203 	smull	r1, r2, r2, r3
 80004c0:	1092      	asrs	r2, r2, #2
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fa7e 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value1%10);
 80004cc:	4b7d      	ldr	r3, [pc, #500]	; (80006c4 <fsm_automatic+0x2ac>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b7b      	ldr	r3, [pc, #492]	; (80006c0 <fsm_automatic+0x2a8>)
 80004d2:	fb83 1302 	smull	r1, r3, r3, r2
 80004d6:	1099      	asrs	r1, r3, #2
 80004d8:	17d3      	asrs	r3, r2, #31
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	460b      	mov	r3, r1
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	1ad1      	subs	r1, r2, r3
 80004e6:	4608      	mov	r0, r1
 80004e8:	f000 fae2 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(2);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fb61 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(3);
 80004f2:	2003      	movs	r0, #3
 80004f4:	f000 fb5e 	bl	8000bb4 <turn_on_7seg>
				side = 0;
 80004f8:	4b6f      	ldr	r3, [pc, #444]	; (80006b8 <fsm_automatic+0x2a0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
				value1--;
 80004fe:	4b71      	ldr	r3, [pc, #452]	; (80006c4 <fsm_automatic+0x2ac>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	4a6f      	ldr	r2, [pc, #444]	; (80006c4 <fsm_automatic+0x2ac>)
 8000506:	6013      	str	r3, [r2, #0]
				if (value1==0) {
 8000508:	4b6e      	ldr	r3, [pc, #440]	; (80006c4 <fsm_automatic+0x2ac>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d106      	bne.n	800051e <fsm_automatic+0x106>
					status = STATE1;
 8000510:	4b66      	ldr	r3, [pc, #408]	; (80006ac <fsm_automatic+0x294>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
					value1 = durationYellow;
 8000516:	4b6c      	ldr	r3, [pc, #432]	; (80006c8 <fsm_automatic+0x2b0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a6a      	ldr	r2, [pc, #424]	; (80006c4 <fsm_automatic+0x2ac>)
 800051c:	6013      	str	r3, [r2, #0]
				}
			}
			set_timer(DURATION);
 800051e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000522:	f000 fc89 	bl	8000e38 <set_timer>
		}
		break;
 8000526:	e17e      	b.n	8000826 <fsm_automatic+0x40e>
	case STATE1:
		if (timerFlag==1) {
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <fsm_automatic+0x298>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	f040 817c 	bne.w	800082a <fsm_automatic+0x412>
			turn_off_all_singleLed();
 8000532:	f000 fa1f 	bl	8000974 <turn_off_all_singleLed>
			GPIOA->ODR &= ~(0x21<<3);
 8000536:	4b5f      	ldr	r3, [pc, #380]	; (80006b4 <fsm_automatic+0x29c>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a5e      	ldr	r2, [pc, #376]	; (80006b4 <fsm_automatic+0x29c>)
 800053c:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8000540:	60d3      	str	r3, [r2, #12]
			turn_off_all_7seg();
 8000542:	f000 fb29 	bl	8000b98 <turn_off_all_7seg>
			if (side==0) {
 8000546:	4b5c      	ldr	r3, [pc, #368]	; (80006b8 <fsm_automatic+0x2a0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d129      	bne.n	80005a2 <fsm_automatic+0x18a>
				display_7SEG1(value0/10);
 800054e:	4b5b      	ldr	r3, [pc, #364]	; (80006bc <fsm_automatic+0x2a4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a5b      	ldr	r2, [pc, #364]	; (80006c0 <fsm_automatic+0x2a8>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1092      	asrs	r2, r2, #2
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fa32 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value0%10);
 8000564:	4b55      	ldr	r3, [pc, #340]	; (80006bc <fsm_automatic+0x2a4>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <fsm_automatic+0x2a8>)
 800056a:	fb83 1302 	smull	r1, r3, r3, r2
 800056e:	1099      	asrs	r1, r3, #2
 8000570:	17d3      	asrs	r3, r2, #31
 8000572:	1ac9      	subs	r1, r1, r3
 8000574:	460b      	mov	r3, r1
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	440b      	add	r3, r1
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	1ad1      	subs	r1, r2, r3
 800057e:	4608      	mov	r0, r1
 8000580:	f000 fa96 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(0);
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fb15 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fb12 	bl	8000bb4 <turn_on_7seg>
				side = 1;
 8000590:	4b49      	ldr	r3, [pc, #292]	; (80006b8 <fsm_automatic+0x2a0>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
				value0--;
 8000596:	4b49      	ldr	r3, [pc, #292]	; (80006bc <fsm_automatic+0x2a4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a47      	ldr	r2, [pc, #284]	; (80006bc <fsm_automatic+0x2a4>)
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	e037      	b.n	8000612 <fsm_automatic+0x1fa>
			}
			else {
				display_7SEG1(value1/10);
 80005a2:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <fsm_automatic+0x2ac>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a46      	ldr	r2, [pc, #280]	; (80006c0 <fsm_automatic+0x2a8>)
 80005a8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ac:	1092      	asrs	r2, r2, #2
 80005ae:	17db      	asrs	r3, r3, #31
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fa08 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value1%10);
 80005b8:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <fsm_automatic+0x2ac>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <fsm_automatic+0x2a8>)
 80005be:	fb83 1302 	smull	r1, r3, r3, r2
 80005c2:	1099      	asrs	r1, r3, #2
 80005c4:	17d3      	asrs	r3, r2, #31
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	460b      	mov	r3, r1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	1ad1      	subs	r1, r2, r3
 80005d2:	4608      	mov	r0, r1
 80005d4:	f000 fa6c 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(2);
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 faeb 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(3);
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 fae8 	bl	8000bb4 <turn_on_7seg>
				side = 0;
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <fsm_automatic+0x2a0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
				value1--;
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <fsm_automatic+0x2ac>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	4a34      	ldr	r2, [pc, #208]	; (80006c4 <fsm_automatic+0x2ac>)
 80005f2:	6013      	str	r3, [r2, #0]
				if (value1==0) {
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <fsm_automatic+0x2ac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10a      	bne.n	8000612 <fsm_automatic+0x1fa>
					value1 = durationRed;
 80005fc:	4b33      	ldr	r3, [pc, #204]	; (80006cc <fsm_automatic+0x2b4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <fsm_automatic+0x2ac>)
 8000602:	6013      	str	r3, [r2, #0]
					value0 = durationGreen;
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <fsm_automatic+0x2b8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2c      	ldr	r2, [pc, #176]	; (80006bc <fsm_automatic+0x2a4>)
 800060a:	6013      	str	r3, [r2, #0]
					status = STATE2;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <fsm_automatic+0x294>)
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
				}
			}
			set_timer(DURATION);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f000 fc0f 	bl	8000e38 <set_timer>
		}
		break;
 800061a:	e106      	b.n	800082a <fsm_automatic+0x412>
	case STATE2:
		if (timerFlag==1) {
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <fsm_automatic+0x298>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	f040 8104 	bne.w	800082e <fsm_automatic+0x416>
			turn_off_all_singleLed();
 8000626:	f000 f9a5 	bl	8000974 <turn_off_all_singleLed>
			GPIOA->ODR &= ~(0x5<<4);
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <fsm_automatic+0x29c>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <fsm_automatic+0x29c>)
 8000630:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000634:	60d3      	str	r3, [r2, #12]
			turn_off_all_7seg();
 8000636:	f000 faaf 	bl	8000b98 <turn_off_all_7seg>
			if (side==0) {
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <fsm_automatic+0x2a0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d148      	bne.n	80006d4 <fsm_automatic+0x2bc>
				display_7SEG1(value0/10);
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <fsm_automatic+0x2a4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <fsm_automatic+0x2a8>)
 8000648:	fb82 1203 	smull	r1, r2, r2, r3
 800064c:	1092      	asrs	r2, r2, #2
 800064e:	17db      	asrs	r3, r3, #31
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f9b8 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value0%10);
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <fsm_automatic+0x2a4>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <fsm_automatic+0x2a8>)
 800065e:	fb83 1302 	smull	r1, r3, r3, r2
 8000662:	1099      	asrs	r1, r3, #2
 8000664:	17d3      	asrs	r3, r2, #31
 8000666:	1ac9      	subs	r1, r1, r3
 8000668:	460b      	mov	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1ad1      	subs	r1, r2, r3
 8000672:	4608      	mov	r0, r1
 8000674:	f000 fa1c 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fa9b 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fa98 	bl	8000bb4 <turn_on_7seg>
				side = 1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <fsm_automatic+0x2a0>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]
				value0--;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <fsm_automatic+0x2a4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <fsm_automatic+0x2a4>)
 8000692:	6013      	str	r3, [r2, #0]
				if (value0==0) {
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <fsm_automatic+0x2a4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d144      	bne.n	8000726 <fsm_automatic+0x30e>
					status = STATE3;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <fsm_automatic+0x294>)
 800069e:	2203      	movs	r2, #3
 80006a0:	601a      	str	r2, [r3, #0]
					value0 = durationYellow;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <fsm_automatic+0x2b0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <fsm_automatic+0x2a4>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e03c      	b.n	8000726 <fsm_automatic+0x30e>
 80006ac:	20000070 	.word	0x20000070
 80006b0:	200000c4 	.word	0x200000c4
 80006b4:	40010800 	.word	0x40010800
 80006b8:	20000074 	.word	0x20000074
 80006bc:	20000004 	.word	0x20000004
 80006c0:	66666667 	.word	0x66666667
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000014 	.word	0x20000014
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	20000010 	.word	0x20000010
				}
			}
			else {
				display_7SEG1(value1/10);
 80006d4:	4b58      	ldr	r3, [pc, #352]	; (8000838 <fsm_automatic+0x420>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a58      	ldr	r2, [pc, #352]	; (800083c <fsm_automatic+0x424>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1092      	asrs	r2, r2, #2
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f96f 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value1%10);
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <fsm_automatic+0x420>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b53      	ldr	r3, [pc, #332]	; (800083c <fsm_automatic+0x424>)
 80006f0:	fb83 1302 	smull	r1, r3, r3, r2
 80006f4:	1099      	asrs	r1, r3, #2
 80006f6:	17d3      	asrs	r3, r2, #31
 80006f8:	1ac9      	subs	r1, r1, r3
 80006fa:	460b      	mov	r3, r1
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	440b      	add	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	1ad1      	subs	r1, r2, r3
 8000704:	4608      	mov	r0, r1
 8000706:	f000 f9d3 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(2);
 800070a:	2002      	movs	r0, #2
 800070c:	f000 fa52 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(3);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 fa4f 	bl	8000bb4 <turn_on_7seg>
				side = 0;
 8000716:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <fsm_automatic+0x428>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
				value1--;
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <fsm_automatic+0x420>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a45      	ldr	r2, [pc, #276]	; (8000838 <fsm_automatic+0x420>)
 8000724:	6013      	str	r3, [r2, #0]
			}
			set_timer(DURATION);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 fb85 	bl	8000e38 <set_timer>
		}
		break;
 800072e:	e07e      	b.n	800082e <fsm_automatic+0x416>
	case STATE3:
		if (timerFlag==1) {
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <fsm_automatic+0x42c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d17c      	bne.n	8000832 <fsm_automatic+0x41a>
			turn_off_all_singleLed();
 8000738:	f000 f91c 	bl	8000974 <turn_off_all_singleLed>
			GPIOA->ODR &= ~(0x3<<5);
 800073c:	4b42      	ldr	r3, [pc, #264]	; (8000848 <fsm_automatic+0x430>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a41      	ldr	r2, [pc, #260]	; (8000848 <fsm_automatic+0x430>)
 8000742:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000746:	60d3      	str	r3, [r2, #12]
			turn_off_all_7seg();
 8000748:	f000 fa26 	bl	8000b98 <turn_off_all_7seg>
			if (side==0) {
 800074c:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <fsm_automatic+0x428>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d129      	bne.n	80007a8 <fsm_automatic+0x390>
				display_7SEG1(value0/10);
 8000754:	4b3d      	ldr	r3, [pc, #244]	; (800084c <fsm_automatic+0x434>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a38      	ldr	r2, [pc, #224]	; (800083c <fsm_automatic+0x424>)
 800075a:	fb82 1203 	smull	r1, r2, r2, r3
 800075e:	1092      	asrs	r2, r2, #2
 8000760:	17db      	asrs	r3, r3, #31
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f92f 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value0%10);
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <fsm_automatic+0x434>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <fsm_automatic+0x424>)
 8000770:	fb83 1302 	smull	r1, r3, r3, r2
 8000774:	1099      	asrs	r1, r3, #2
 8000776:	17d3      	asrs	r3, r2, #31
 8000778:	1ac9      	subs	r1, r1, r3
 800077a:	460b      	mov	r3, r1
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1ad1      	subs	r1, r2, r3
 8000784:	4608      	mov	r0, r1
 8000786:	f000 f993 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(0);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fa12 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fa0f 	bl	8000bb4 <turn_on_7seg>
				side = 1;
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <fsm_automatic+0x428>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
				value0--;
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <fsm_automatic+0x434>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <fsm_automatic+0x434>)
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e037      	b.n	8000818 <fsm_automatic+0x400>
			}
			else {
				display_7SEG1(value1/10);
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <fsm_automatic+0x420>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a23      	ldr	r2, [pc, #140]	; (800083c <fsm_automatic+0x424>)
 80007ae:	fb82 1203 	smull	r1, r2, r2, r3
 80007b2:	1092      	asrs	r2, r2, #2
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f905 	bl	80009c8 <display_7SEG1>
				display_7SEG2(value1%10);
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <fsm_automatic+0x420>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <fsm_automatic+0x424>)
 80007c4:	fb83 1302 	smull	r1, r3, r3, r2
 80007c8:	1099      	asrs	r1, r3, #2
 80007ca:	17d3      	asrs	r3, r2, #31
 80007cc:	1ac9      	subs	r1, r1, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	1ad1      	subs	r1, r2, r3
 80007d8:	4608      	mov	r0, r1
 80007da:	f000 f969 	bl	8000ab0 <display_7SEG2>
				turn_on_7seg(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 f9e8 	bl	8000bb4 <turn_on_7seg>
				turn_on_7seg(3);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f9e5 	bl	8000bb4 <turn_on_7seg>
				side = 0;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <fsm_automatic+0x428>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
				value1--;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <fsm_automatic+0x420>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <fsm_automatic+0x420>)
 80007f8:	6013      	str	r3, [r2, #0]
				if (value1==0) {
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <fsm_automatic+0x420>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <fsm_automatic+0x400>
					value1 = durationGreen;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <fsm_automatic+0x438>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <fsm_automatic+0x420>)
 8000808:	6013      	str	r3, [r2, #0]
					value0 = durationRed;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <fsm_automatic+0x43c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <fsm_automatic+0x434>)
 8000810:	6013      	str	r3, [r2, #0]
					status = STATE0;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <fsm_automatic+0x440>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
				}
			}
			set_timer(DURATION);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 fb0c 	bl	8000e38 <set_timer>
		}
		break;
 8000820:	e007      	b.n	8000832 <fsm_automatic+0x41a>
	default:
		break;
 8000822:	bf00      	nop
 8000824:	e006      	b.n	8000834 <fsm_automatic+0x41c>
		break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <fsm_automatic+0x41c>
		break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <fsm_automatic+0x41c>
		break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <fsm_automatic+0x41c>
		break;
 8000832:	bf00      	nop
	}
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000008 	.word	0x20000008
 800083c:	66666667 	.word	0x66666667
 8000840:	20000074 	.word	0x20000074
 8000844:	200000c4 	.word	0x200000c4
 8000848:	40010800 	.word	0x40010800
 800084c:	20000004 	.word	0x20000004
 8000850:	20000010 	.word	0x20000010
 8000854:	2000000c 	.word	0x2000000c
 8000858:	20000070 	.word	0x20000070

0800085c <fsm_manual>:

void fsm_manual() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if (timerFlag==1) {
 8000860:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <fsm_manual+0xfc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d174      	bne.n	8000952 <fsm_manual+0xf6>
		switch(status) {
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <fsm_manual+0x100>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d04a      	beq.n	8000906 <fsm_manual+0xaa>
 8000870:	2b07      	cmp	r3, #7
 8000872:	dc6a      	bgt.n	800094a <fsm_manual+0xee>
 8000874:	2b05      	cmp	r3, #5
 8000876:	d002      	beq.n	800087e <fsm_manual+0x22>
 8000878:	2b06      	cmp	r3, #6
 800087a:	d022      	beq.n	80008c2 <fsm_manual+0x66>
			GPIOA->ODR &= ~(0x9<<5);
			display_7SEG1(durationYellow/10);
			display_7SEG2(durationYellow%10);
			break;
		default:
			break;
 800087c:	e065      	b.n	800094a <fsm_manual+0xee>
			GPIOA->ODR &= ~(0x9<<3);
 800087e:	4b38      	ldr	r3, [pc, #224]	; (8000960 <fsm_manual+0x104>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	4a37      	ldr	r2, [pc, #220]	; (8000960 <fsm_manual+0x104>)
 8000884:	f023 0348 	bic.w	r3, r3, #72	; 0x48
 8000888:	60d3      	str	r3, [r2, #12]
			display_7SEG1(durationRed/10);
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <fsm_manual+0x108>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <fsm_manual+0x10c>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	1092      	asrs	r2, r2, #2
 8000896:	17db      	asrs	r3, r3, #31
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f894 	bl	80009c8 <display_7SEG1>
			display_7SEG2(durationRed%10);
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <fsm_manual+0x108>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <fsm_manual+0x10c>)
 80008a6:	fb83 1302 	smull	r1, r3, r3, r2
 80008aa:	1099      	asrs	r1, r3, #2
 80008ac:	17d3      	asrs	r3, r2, #31
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1ad1      	subs	r1, r2, r3
 80008ba:	4608      	mov	r0, r1
 80008bc:	f000 f8f8 	bl	8000ab0 <display_7SEG2>
			break;
 80008c0:	e044      	b.n	800094c <fsm_manual+0xf0>
			GPIOA->ODR &= ~(0x9<<4);
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <fsm_manual+0x104>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <fsm_manual+0x104>)
 80008c8:	f023 0390 	bic.w	r3, r3, #144	; 0x90
 80008cc:	60d3      	str	r3, [r2, #12]
			display_7SEG1(durationGreen/10);
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <fsm_manual+0x110>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <fsm_manual+0x10c>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1092      	asrs	r2, r2, #2
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f872 	bl	80009c8 <display_7SEG1>
			display_7SEG2(durationGreen%10);
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <fsm_manual+0x110>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <fsm_manual+0x10c>)
 80008ea:	fb83 1302 	smull	r1, r3, r3, r2
 80008ee:	1099      	asrs	r1, r3, #2
 80008f0:	17d3      	asrs	r3, r2, #31
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	460b      	mov	r3, r1
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	1ad1      	subs	r1, r2, r3
 80008fe:	4608      	mov	r0, r1
 8000900:	f000 f8d6 	bl	8000ab0 <display_7SEG2>
			break;
 8000904:	e022      	b.n	800094c <fsm_manual+0xf0>
			GPIOA->ODR &= ~(0x9<<5);
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <fsm_manual+0x104>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <fsm_manual+0x104>)
 800090c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000910:	60d3      	str	r3, [r2, #12]
			display_7SEG1(durationYellow/10);
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <fsm_manual+0x114>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <fsm_manual+0x10c>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1092      	asrs	r2, r2, #2
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f850 	bl	80009c8 <display_7SEG1>
			display_7SEG2(durationYellow%10);
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <fsm_manual+0x114>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <fsm_manual+0x10c>)
 800092e:	fb83 1302 	smull	r1, r3, r3, r2
 8000932:	1099      	asrs	r1, r3, #2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	460b      	mov	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1ad1      	subs	r1, r2, r3
 8000942:	4608      	mov	r0, r1
 8000944:	f000 f8b4 	bl	8000ab0 <display_7SEG2>
			break;
 8000948:	e000      	b.n	800094c <fsm_manual+0xf0>
			break;
 800094a:	bf00      	nop
		}
		set_timer(DURATION_MANUAL);
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f000 fa73 	bl	8000e38 <set_timer>
	}
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000c4 	.word	0x200000c4
 800095c:	20000070 	.word	0x20000070
 8000960:	40010800 	.word	0x40010800
 8000964:	2000000c 	.word	0x2000000c
 8000968:	66666667 	.word	0x66666667
 800096c:	20000010 	.word	0x20000010
 8000970:	20000014 	.word	0x20000014

08000974 <turn_off_all_singleLed>:


#include "led.h"
#include "main.h"

void turn_off_all_singleLed() {
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (0x3F<<3);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <turn_off_all_singleLed+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <turn_off_all_singleLed+0x18>)
 800097e:	f443 73fc 	orr.w	r3, r3, #504	; 0x1f8
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40010800 	.word	0x40010800

08000990 <reset_7SEG1>:

void reset_7SEG1() {
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	GPIOB->ODR |= 0x7F;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <reset_7SEG1+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <reset_7SEG1+0x18>)
 800099a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40010c00 	.word	0x40010c00

080009ac <reset_7SEG2>:

void reset_7SEG2() {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (0x7F<<7);
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <reset_7SEG2+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <reset_7SEG2+0x18>)
 80009b6:	f443 537e 	orr.w	r3, r3, #16256	; 0x3f80
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <display_7SEG1>:

void display_7SEG1(int number) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	reset_7SEG1();
 80009d0:	f7ff ffde 	bl	8000990 <reset_7SEG1>
		switch(number) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	d85c      	bhi.n	8000a94 <display_7SEG1+0xcc>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <display_7SEG1+0x18>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a17 	.word	0x08000a17
 80009e8:	08000a25 	.word	0x08000a25
 80009ec:	08000a33 	.word	0x08000a33
 80009f0:	08000a41 	.word	0x08000a41
 80009f4:	08000a4f 	.word	0x08000a4f
 80009f8:	08000a5d 	.word	0x08000a5d
 80009fc:	08000a6b 	.word	0x08000a6b
 8000a00:	08000a79 	.word	0x08000a79
 8000a04:	08000a87 	.word	0x08000a87
			case 0:
				GPIOB->ODR &= ~0x7E; // 0 = 0b1111110, but in order to turn on we need to get inverse this binary number
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <display_7SEG1+0xe4>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <display_7SEG1+0xe4>)
 8000a0e:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8000a12:	60d3      	str	r3, [r2, #12]
				break ;
 8000a14:	e045      	b.n	8000aa2 <display_7SEG1+0xda>
			case 1:
				GPIOB->ODR &= ~0x30; // similarly
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <display_7SEG1+0xe4>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4a24      	ldr	r2, [pc, #144]	; (8000aac <display_7SEG1+0xe4>)
 8000a1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a20:	60d3      	str	r3, [r2, #12]
				break ;
 8000a22:	e03e      	b.n	8000aa2 <display_7SEG1+0xda>
			case 2:
				GPIOB->ODR &= ~0x5B; // similarly
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <display_7SEG1+0xe4>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <display_7SEG1+0xe4>)
 8000a2a:	f023 035b 	bic.w	r3, r3, #91	; 0x5b
 8000a2e:	60d3      	str	r3, [r2, #12]
				break ;
 8000a30:	e037      	b.n	8000aa2 <display_7SEG1+0xda>
			case 3:
				GPIOB->ODR &= ~0x4F; // similarly
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <display_7SEG1+0xe4>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <display_7SEG1+0xe4>)
 8000a38:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8000a3c:	60d3      	str	r3, [r2, #12]
				break ;
 8000a3e:	e030      	b.n	8000aa2 <display_7SEG1+0xda>
			case 4:
				GPIOB->ODR &= ~0x66; // similarly
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <display_7SEG1+0xe4>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <display_7SEG1+0xe4>)
 8000a46:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8000a4a:	60d3      	str	r3, [r2, #12]
				break ;
 8000a4c:	e029      	b.n	8000aa2 <display_7SEG1+0xda>
			case 5:
				GPIOB->ODR &= ~0x6D; // similarly
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <display_7SEG1+0xe4>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <display_7SEG1+0xe4>)
 8000a54:	f023 036d 	bic.w	r3, r3, #109	; 0x6d
 8000a58:	60d3      	str	r3, [r2, #12]
				break ;
 8000a5a:	e022      	b.n	8000aa2 <display_7SEG1+0xda>
			case 6:
				GPIOB->ODR &= ~0x7D; // similarly
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <display_7SEG1+0xe4>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <display_7SEG1+0xe4>)
 8000a62:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
 8000a66:	60d3      	str	r3, [r2, #12]
				break ;
 8000a68:	e01b      	b.n	8000aa2 <display_7SEG1+0xda>
			case 7:
				GPIOB->ODR &= ~0x07; // similarly
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <display_7SEG1+0xe4>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <display_7SEG1+0xe4>)
 8000a70:	f023 0307 	bic.w	r3, r3, #7
 8000a74:	60d3      	str	r3, [r2, #12]
				break ;
 8000a76:	e014      	b.n	8000aa2 <display_7SEG1+0xda>
			case 8:
				GPIOB->ODR &= ~0x7F; // similarly
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <display_7SEG1+0xe4>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <display_7SEG1+0xe4>)
 8000a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a82:	60d3      	str	r3, [r2, #12]
				break ;
 8000a84:	e00d      	b.n	8000aa2 <display_7SEG1+0xda>
			case 9:
				GPIOB->ODR &= ~0x67; // similarly
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <display_7SEG1+0xe4>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <display_7SEG1+0xe4>)
 8000a8c:	f023 0367 	bic.w	r3, r3, #103	; 0x67
 8000a90:	60d3      	str	r3, [r2, #12]
				break ;
 8000a92:	e006      	b.n	8000aa2 <display_7SEG1+0xda>
			default:
				GPIOB->ODR &= ~0x77; // similarly
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <display_7SEG1+0xe4>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <display_7SEG1+0xe4>)
 8000a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000a9e:	60d3      	str	r3, [r2, #12]
				break ;
 8000aa0:	bf00      	nop
		}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <display_7SEG2>:

void display_7SEG2(int number) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	reset_7SEG2();
 8000ab8:	f7ff ff78 	bl	80009ac <reset_7SEG2>
		switch(number) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b09      	cmp	r3, #9
 8000ac0:	d85c      	bhi.n	8000b7c <display_7SEG2+0xcc>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <display_7SEG2+0x18>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	08000aff 	.word	0x08000aff
 8000ad0:	08000b0d 	.word	0x08000b0d
 8000ad4:	08000b1b 	.word	0x08000b1b
 8000ad8:	08000b29 	.word	0x08000b29
 8000adc:	08000b37 	.word	0x08000b37
 8000ae0:	08000b45 	.word	0x08000b45
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b61 	.word	0x08000b61
 8000aec:	08000b6f 	.word	0x08000b6f
			case 0:
				GPIOB->ODR &= ~(0x3F<<7); // 0 = 0b1111110, but in order to turn on we need to get inverse this binary number
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <display_7SEG2+0xe4>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <display_7SEG2+0xe4>)
 8000af6:	f423 53fc 	bic.w	r3, r3, #8064	; 0x1f80
 8000afa:	60d3      	str	r3, [r2, #12]
				break ;
 8000afc:	e045      	b.n	8000b8a <display_7SEG2+0xda>
			case 1:
				GPIOB->ODR &= ~(0x06<<7); // similarly
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <display_7SEG2+0xe4>)
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <display_7SEG2+0xe4>)
 8000b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b08:	60d3      	str	r3, [r2, #12]
				break ;
 8000b0a:	e03e      	b.n	8000b8a <display_7SEG2+0xda>
			case 2:
				GPIOB->ODR &= ~(0x5B<<7); // similarly
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <display_7SEG2+0xe4>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <display_7SEG2+0xe4>)
 8000b12:	f423 5336 	bic.w	r3, r3, #11648	; 0x2d80
 8000b16:	60d3      	str	r3, [r2, #12]
				break ;
 8000b18:	e037      	b.n	8000b8a <display_7SEG2+0xda>
			case 3:
				GPIOB->ODR &= ~(0x4F<<7); // similarly
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <display_7SEG2+0xe4>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <display_7SEG2+0xe4>)
 8000b20:	f423 531e 	bic.w	r3, r3, #10112	; 0x2780
 8000b24:	60d3      	str	r3, [r2, #12]
				break ;
 8000b26:	e030      	b.n	8000b8a <display_7SEG2+0xda>
			case 4:
				GPIOB->ODR &= ~(0x66<<7); // similarly
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <display_7SEG2+0xe4>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <display_7SEG2+0xe4>)
 8000b2e:	f423 534c 	bic.w	r3, r3, #13056	; 0x3300
 8000b32:	60d3      	str	r3, [r2, #12]
				break ;
 8000b34:	e029      	b.n	8000b8a <display_7SEG2+0xda>
			case 5:
				GPIOB->ODR &= ~(0x6D<<7); // similarly
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <display_7SEG2+0xe4>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <display_7SEG2+0xe4>)
 8000b3c:	f423 535a 	bic.w	r3, r3, #13952	; 0x3680
 8000b40:	60d3      	str	r3, [r2, #12]
				break ;
 8000b42:	e022      	b.n	8000b8a <display_7SEG2+0xda>
			case 6:
				GPIOB->ODR &= ~(0x7D<<7); // similarly
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <display_7SEG2+0xe4>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <display_7SEG2+0xe4>)
 8000b4a:	f423 537a 	bic.w	r3, r3, #16000	; 0x3e80
 8000b4e:	60d3      	str	r3, [r2, #12]
				break ;
 8000b50:	e01b      	b.n	8000b8a <display_7SEG2+0xda>
			case 7:
				GPIOB->ODR &= ~(0x07<<7); // similarly
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <display_7SEG2+0xe4>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <display_7SEG2+0xe4>)
 8000b58:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000b5c:	60d3      	str	r3, [r2, #12]
				break ;
 8000b5e:	e014      	b.n	8000b8a <display_7SEG2+0xda>
			case 8:
				GPIOB->ODR &= ~(0x7F<<7); // similarly
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <display_7SEG2+0xe4>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <display_7SEG2+0xe4>)
 8000b66:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8000b6a:	60d3      	str	r3, [r2, #12]
				break ;
 8000b6c:	e00d      	b.n	8000b8a <display_7SEG2+0xda>
			case 9:
				GPIOB->ODR &= ~(0x67<<7); // similarly
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <display_7SEG2+0xe4>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <display_7SEG2+0xe4>)
 8000b74:	f423 534e 	bic.w	r3, r3, #13184	; 0x3380
 8000b78:	60d3      	str	r3, [r2, #12]
				break ;
 8000b7a:	e006      	b.n	8000b8a <display_7SEG2+0xda>
			default:
				GPIOB->ODR &= ~(0x77<<7); // similarly
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <display_7SEG2+0xe4>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <display_7SEG2+0xe4>)
 8000b82:	f423 536e 	bic.w	r3, r3, #15232	; 0x3b80
 8000b86:	60d3      	str	r3, [r2, #12]
				break ;
 8000b88:	bf00      	nop
		}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <turn_off_all_7seg>:

void turn_off_all_7seg() {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (0xF<<9);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <turn_off_all_7seg+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <turn_off_all_7seg+0x18>)
 8000ba2:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <turn_on_7seg>:

void turn_on_7seg(int index){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	int shift = index+9;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3309      	adds	r3, #9
 8000bc0:	60fb      	str	r3, [r7, #12]
	GPIOA->ODR &= ~(1<<shift);
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <turn_on_7seg+0x30>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	fa01 f202 	lsl.w	r2, r1, r2
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <turn_on_7seg+0x30>)
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40010800 	.word	0x40010800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fa58 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f824 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f000 f8aa 	bl	8000d4c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bf8:	f000 f85c 	bl	8000cb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <main+0x40>)
 8000bfe:	f001 f9a3 	bl	8001f48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_timer(500);
 8000c02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c06:	f000 f917 	bl	8000e38 <set_timer>
  turn_off_all_singleLed();
 8000c0a:	f7ff feb3 	bl	8000974 <turn_off_all_singleLed>
  value0 = durationRed;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <main+0x44>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <main+0x48>)
 8000c14:	6013      	str	r3, [r2, #0]
  value1 = durationGreen;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <main+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <main+0x50>)
 8000c1c:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  fsm_automatic();
 8000c1e:	f7ff fbfb 	bl	8000418 <fsm_automatic>
	  fsm_manual();
 8000c22:	f7ff fe1b 	bl	800085c <fsm_manual>
	  fsm_automatic();
 8000c26:	e7fa      	b.n	8000c1e <main+0x36>
 8000c28:	20000078 	.word	0x20000078
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000010 	.word	0x20000010
 8000c38:	20000008 	.word	0x20000008

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	2228      	movs	r2, #40	; 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fd34 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c66:	2310      	movs	r3, #16
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fd30 	bl	80016d8 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f8d5 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 ff9e 	bl	8001bdc <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f8c1 	bl	8000e2c <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3740      	adds	r7, #64	; 0x40
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000cda:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000ce8:	220a      	movs	r2, #10
 8000cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000cfa:	f001 f8d5 	bl	8001ea8 <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d04:	f000 f892 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000d16:	f001 fa6b 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d20:	f000 f884 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_TIM2_Init+0x94>)
 8000d32:	f001 fc33 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f000 f876 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000078 	.word	0x20000078

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MX_GPIO_Init+0xbc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 8000d96:	481d      	ldr	r0, [pc, #116]	; (8000e0c <MX_GPIO_Init+0xc0>)
 8000d98:	f000 fc85 	bl	80016a6 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000da4:	f000 fc7f 	bl	80016a6 <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000da8:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8000dac:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MX_GPIO_Init+0xc0>)
 8000dc2:	f000 fadd 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 8000dc6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000dca:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_GPIO_Init+0xc4>)
 8000de0:	f000 face 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000de4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0xc0>)
 8000dfa:	f000 fac1 	bl	8001380 <HAL_GPIO_Init>

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00

08000e14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000e1c:	f000 f828 	bl	8000e70 <timer_run>
	getKeyInput();
 8000e20:	f7ff fa2a 	bl	8000278 <getKeyInput>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <set_timer>:
int timerFlag;
int durationRed = 15;
int durationGreen = 12;
int durationYellow = 3;

void set_timer(int duration){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	timerCounter = duration/PERIOD;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <set_timer+0x2c>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1092      	asrs	r2, r2, #2
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <set_timer+0x30>)
 8000e50:	6013      	str	r3, [r2, #0]
	timerFlag = 0;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <set_timer+0x34>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	66666667 	.word	0x66666667
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	200000c4 	.word	0x200000c4

08000e70 <timer_run>:

void timer_run() {
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	if (timerCounter>0) {
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <timer_run+0x2c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	dd0b      	ble.n	8000e94 <timer_run+0x24>
		timerCounter--;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <timer_run+0x2c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <timer_run+0x2c>)
 8000e84:	6013      	str	r3, [r2, #0]
		if (timerCounter==0) {
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <timer_run+0x2c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <timer_run+0x24>
			timerFlag = 1;
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <timer_run+0x30>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	200000c0 	.word	0x200000c0
 8000ea0:	200000c4 	.word	0x200000c4

08000ea4 <set_led_duration>:

void set_led_duration(int mode){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	switch (mode) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d031      	beq.n	8000f16 <set_led_duration+0x72>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	dc42      	bgt.n	8000f3e <set_led_duration+0x9a>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d003      	beq.n	8000ec6 <set_led_duration+0x22>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d014      	beq.n	8000eee <set_led_duration+0x4a>
	case 3:
		durationGreen = durationGreen + 1;
		durationGreen = durationGreen % 100;
		break;
	}
}
 8000ec4:	e03b      	b.n	8000f3e <set_led_duration+0x9a>
		durationRed = durationRed + 1;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <set_led_duration+0xa4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <set_led_duration+0xa4>)
 8000ece:	6013      	str	r3, [r2, #0]
		durationRed = durationRed % 100;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <set_led_duration+0xa4>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <set_led_duration+0xa8>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	1159      	asrs	r1, r3, #5
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	2164      	movs	r1, #100	; 0x64
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <set_led_duration+0xa4>)
 8000eea:	6013      	str	r3, [r2, #0]
		break;
 8000eec:	e027      	b.n	8000f3e <set_led_duration+0x9a>
		durationYellow = durationYellow + 1;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <set_led_duration+0xac>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <set_led_duration+0xac>)
 8000ef6:	6013      	str	r3, [r2, #0]
		durationYellow = durationYellow % 100;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <set_led_duration+0xac>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <set_led_duration+0xa8>)
 8000efe:	fb83 1302 	smull	r1, r3, r3, r2
 8000f02:	1159      	asrs	r1, r3, #5
 8000f04:	17d3      	asrs	r3, r2, #31
 8000f06:	1acb      	subs	r3, r1, r3
 8000f08:	2164      	movs	r1, #100	; 0x64
 8000f0a:	fb01 f303 	mul.w	r3, r1, r3
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <set_led_duration+0xac>)
 8000f12:	6013      	str	r3, [r2, #0]
		break;
 8000f14:	e013      	b.n	8000f3e <set_led_duration+0x9a>
		durationGreen = durationGreen + 1;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <set_led_duration+0xb0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <set_led_duration+0xb0>)
 8000f1e:	6013      	str	r3, [r2, #0]
		durationGreen = durationGreen % 100;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <set_led_duration+0xb0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <set_led_duration+0xa8>)
 8000f26:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2a:	1159      	asrs	r1, r3, #5
 8000f2c:	17d3      	asrs	r3, r2, #31
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	2164      	movs	r1, #100	; 0x64
 8000f32:	fb01 f303 	mul.w	r3, r1, r3
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <set_led_duration+0xb0>)
 8000f3a:	6013      	str	r3, [r2, #0]
		break;
 8000f3c:	bf00      	nop
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	51eb851f 	.word	0x51eb851f
 8000f50:	20000014 	.word	0x20000014
 8000f54:	20000010 	.word	0x20000010

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_MspInit+0x40>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_MspInit+0x40>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_MspInit+0x40>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_MspInit+0x40>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_MspInit+0x40>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_MspInit+0x40>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d113      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f000 f9a1 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd0:	201c      	movs	r0, #28
 8000fd2:	f000 f9ba 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f000 f87f 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM2_IRQHandler+0x10>)
 800103a:	f000 ffd1 	bl	8001fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000078 	.word	0x20000078

08001048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107a:	f7ff ffe5 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f001 faf7 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001082:	f7ff fdb1 	bl	8000be8 <main>
  bx lr
 8001086:	4770      	bx	lr
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001090:	08002708 	.word	0x08002708
  ldr r2, =_sbss
 8001094:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001098:	200000cc 	.word	0x200000cc

0800109c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_2_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_Init+0x28>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_Init+0x28>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f923 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b6:	200f      	movs	r0, #15
 80010b8:	f000 f808 	bl	80010cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff ff4c 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40022000 	.word	0x40022000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x54>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x58>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f93b 	bl	8001366 <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f000 f903 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_InitTick+0x5c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000018 	.word	0x20000018
 8001124:	20000020 	.word	0x20000020
 8001128:	2000001c 	.word	0x2000001c

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x1c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x20>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x20>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000020 	.word	0x20000020
 800114c:	200000c8 	.word	0x200000c8

08001150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <HAL_GetTick+0x10>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	200000c8 	.word	0x200000c8

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4906      	ldr	r1, [pc, #24]	; (80011fc <__NVIC_EnableIRQ+0x34>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff90 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff2d 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff42 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff90 	bl	8001254 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5f 	bl	8001200 <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff35 	bl	80011c8 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b08b      	sub	sp, #44	; 0x2c
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e161      	b.n	8001658 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001394:	2201      	movs	r2, #1
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 8150 	bne.w	8001652 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a97      	ldr	r2, [pc, #604]	; (8001614 <HAL_GPIO_Init+0x294>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d05e      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013bc:	4a95      	ldr	r2, [pc, #596]	; (8001614 <HAL_GPIO_Init+0x294>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d875      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013c2:	4a95      	ldr	r2, [pc, #596]	; (8001618 <HAL_GPIO_Init+0x298>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d058      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013c8:	4a93      	ldr	r2, [pc, #588]	; (8001618 <HAL_GPIO_Init+0x298>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d86f      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013ce:	4a93      	ldr	r2, [pc, #588]	; (800161c <HAL_GPIO_Init+0x29c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d052      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013d4:	4a91      	ldr	r2, [pc, #580]	; (800161c <HAL_GPIO_Init+0x29c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d869      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013da:	4a91      	ldr	r2, [pc, #580]	; (8001620 <HAL_GPIO_Init+0x2a0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d04c      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013e0:	4a8f      	ldr	r2, [pc, #572]	; (8001620 <HAL_GPIO_Init+0x2a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d863      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013e6:	4a8f      	ldr	r2, [pc, #572]	; (8001624 <HAL_GPIO_Init+0x2a4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d046      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013ec:	4a8d      	ldr	r2, [pc, #564]	; (8001624 <HAL_GPIO_Init+0x2a4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d85d      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d82a      	bhi.n	800144c <HAL_GPIO_Init+0xcc>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d859      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_GPIO_Init+0x80>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	0800147b 	.word	0x0800147b
 8001404:	08001455 	.word	0x08001455
 8001408:	08001467 	.word	0x08001467
 800140c:	080014a9 	.word	0x080014a9
 8001410:	080014af 	.word	0x080014af
 8001414:	080014af 	.word	0x080014af
 8001418:	080014af 	.word	0x080014af
 800141c:	080014af 	.word	0x080014af
 8001420:	080014af 	.word	0x080014af
 8001424:	080014af 	.word	0x080014af
 8001428:	080014af 	.word	0x080014af
 800142c:	080014af 	.word	0x080014af
 8001430:	080014af 	.word	0x080014af
 8001434:	080014af 	.word	0x080014af
 8001438:	080014af 	.word	0x080014af
 800143c:	080014af 	.word	0x080014af
 8001440:	080014af 	.word	0x080014af
 8001444:	0800145d 	.word	0x0800145d
 8001448:	08001471 	.word	0x08001471
 800144c:	4a76      	ldr	r2, [pc, #472]	; (8001628 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001452:	e02c      	b.n	80014ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e029      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	3304      	adds	r3, #4
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e024      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3308      	adds	r3, #8
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e01f      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e01a      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001482:	2304      	movs	r3, #4
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e013      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	611a      	str	r2, [r3, #16]
          break;
 800149a:	e009      	b.n	80014b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	615a      	str	r2, [r3, #20]
          break;
 80014a6:	e003      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x130>
          break;
 80014ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d801      	bhi.n	80014ba <HAL_GPIO_Init+0x13a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_Init+0x13e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d802      	bhi.n	80014cc <HAL_GPIO_Init+0x14c>
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x152>
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	3b08      	subs	r3, #8
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	210f      	movs	r1, #15
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	401a      	ands	r2, r3
 80014e4:	6a39      	ldr	r1, [r7, #32]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80a9 	beq.w	8001652 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001500:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_GPIO_Init+0x2ac>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_GPIO_Init+0x2ac>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_GPIO_Init+0x2ac>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x2b0>)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3d      	ldr	r2, [pc, #244]	; (8001634 <HAL_GPIO_Init+0x2b4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00d      	beq.n	8001560 <HAL_GPIO_Init+0x1e0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3c      	ldr	r2, [pc, #240]	; (8001638 <HAL_GPIO_Init+0x2b8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_GPIO_Init+0x1dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <HAL_GPIO_Init+0x2bc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_GPIO_Init+0x1d8>
 8001554:	2302      	movs	r3, #2
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 8001558:	2303      	movs	r3, #3
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x1e2>
 8001560:	2300      	movs	r3, #0
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001572:	492f      	ldr	r1, [pc, #188]	; (8001630 <HAL_GPIO_Init+0x2b0>)
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	492b      	ldr	r1, [pc, #172]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4927      	ldr	r1, [pc, #156]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4921      	ldr	r1, [pc, #132]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	491d      	ldr	r1, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	4917      	ldr	r1, [pc, #92]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4913      	ldr	r1, [pc, #76]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01f      	beq.n	8001644 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	490d      	ldr	r1, [pc, #52]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e01f      	b.n	8001652 <HAL_GPIO_Init+0x2d2>
 8001612:	bf00      	nop
 8001614:	10320000 	.word	0x10320000
 8001618:	10310000 	.word	0x10310000
 800161c:	10220000 	.word	0x10220000
 8001620:	10210000 	.word	0x10210000
 8001624:	10120000 	.word	0x10120000
 8001628:	10110000 	.word	0x10110000
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	40010800 	.word	0x40010800
 8001638:	40010c00 	.word	0x40010c00
 800163c:	40011000 	.word	0x40011000
 8001640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_GPIO_Init+0x2f4>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <HAL_GPIO_Init+0x2f4>)
 800164e:	4013      	ands	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae96 	bne.w	8001394 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	372c      	adds	r7, #44	; 0x2c
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	887b      	ldrh	r3, [r7, #2]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
 80016b2:	4613      	mov	r3, r2
 80016b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c2:	e003      	b.n	80016cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	041a      	lsls	r2, r3, #16
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e272      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00c      	beq.n	800171e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d112      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06c      	beq.n	8001804 <HAL_RCC_OscConfig+0x12c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d168      	bne.n	8001804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e24c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x76>
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a77      	ldr	r2, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0xbc>
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a71      	ldr	r2, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fccc 	bl	8001150 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fcc8 	bl	8001150 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e200      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xe4>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fcb8 	bl	8001150 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fcb4 	bl	8001150 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1ec      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10c>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1c0      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fc6d 	bl	8001150 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fc69 	bl	8001150 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1a1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc4c 	bl	8001150 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fc48 	bl	8001150 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e180      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03a      	beq.n	800195c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fc2c 	bl	8001150 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fc28 	bl	8001150 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e160      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 faa6 	bl	8001e6c <RCC_Delay>
 8001920:	e01c      	b.n	800195c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff fc12 	bl	8001150 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fc0e 	bl	8001150 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d908      	bls.n	8001950 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e146      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	42420000 	.word	0x42420000
 800194c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e9      	bne.n	8001930 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a6 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a87      	ldr	r2, [pc, #540]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fbcf 	bl	8001150 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fbcb 	bl	8001150 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e103      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x4c8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x312>
 80019dc:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e02d      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x334>
 80019f2:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a69      	ldr	r2, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x356>
 8001a14:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a60      	ldr	r2, [pc, #384]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a5a      	ldr	r2, [pc, #360]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fb7f 	bl	8001150 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fb7b 	bl	8001150 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0b1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x37e>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb69 	bl	8001150 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb65 	bl	8001150 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e09b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8087 	beq.w	8001bce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d061      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d146      	bne.n	8001b62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fb39 	bl	8001150 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fb35 	bl	8001150 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e06d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4921      	ldr	r1, [pc, #132]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a19      	ldr	r1, [r3, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	491b      	ldr	r1, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb09 	bl	8001150 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fb05 	bl	8001150 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e03d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46a>
 8001b60:	e035      	b.n	8001bce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff faf2 	bl	8001150 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff faee 	bl	8001150 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e026      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x498>
 8001b8e:	e01e      	b.n	8001bce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e019      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x500>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0d0      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4965      	ldr	r1, [pc, #404]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	494d      	ldr	r1, [pc, #308]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d040      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07f      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e073      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06b      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4936      	ldr	r1, [pc, #216]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff fa40 	bl	8001150 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff fa3c 	bl	8001150 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e053      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d210      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4922      	ldr	r1, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e032      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4916      	ldr	r1, [pc, #88]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d6a:	f000 f821 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	490a      	ldr	r1, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	5ccb      	ldrb	r3, [r1, r3]
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1cc>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x1d0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f99e 	bl	80010cc <HAL_InitTick>

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	080026f0 	.word	0x080026f0
 8001da8:	20000018 	.word	0x20000018
 8001dac:	2000001c 	.word	0x2000001c

08001db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b490      	push	{r4, r7}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xac>)
 8001db8:	1d3c      	adds	r4, r7, #4
 8001dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc0:	f240 2301 	movw	r3, #513	; 0x201
 8001dc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x46>
 8001dee:	e02b      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	e02b      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3328      	adds	r3, #40	; 0x28
 8001e00:	443b      	add	r3, r7
 8001e02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e06:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d012      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c5b      	lsrs	r3, r3, #17
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	3328      	adds	r3, #40	; 0x28
 8001e1e:	443b      	add	r3, r7
 8001e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e2a:	fb03 f202 	mul.w	r2, r3, r2
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e004      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	623b      	str	r3, [r7, #32]
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4a:	623b      	str	r3, [r7, #32]
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc90      	pop	{r4, r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	080026e0 	.word	0x080026e0
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <RCC_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <RCC_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e88:	bf00      	nop
  }
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <RCC_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e041      	b.n	8001f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff f864 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 fa6a 	bl	80023c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e035      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_TIM_Base_Start_IT+0x90>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_TIM_Base_Start_IT+0x4e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8a:	d004      	beq.n	8001f96 <HAL_TIM_Base_Start_IT+0x4e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_TIM_Base_Start_IT+0x94>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d010      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb8:	e007      	b.n	8001fca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40000400 	.word	0x40000400

08001fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f9b1 	bl	800238a <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9a4 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f9b3 	bl	800239c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0204 	mvn.w	r2, #4
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f987 	bl	800238a <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f97a 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f989 	bl	800239c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f95d 	bl	800238a <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f950 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f95f 	bl	800239c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0210 	mvn.w	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2208      	movs	r2, #8
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f933 	bl	800238a <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f926 	bl	8002378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f935 	bl	800239c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe58 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa67 	bl	800265e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8f9 	bl	80023ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0220 	mvn.w	r2, #32
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa32 	bl	800264c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIM_ConfigClockSource+0x18>
 8002204:	2302      	movs	r3, #2
 8002206:	e0b3      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x180>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002240:	d03e      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0xd0>
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	f200 8087 	bhi.w	8002358 <HAL_TIM_ConfigClockSource+0x168>
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	f000 8085 	beq.w	800235c <HAL_TIM_ConfigClockSource+0x16c>
 8002252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002256:	d87f      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002258:	2b70      	cmp	r3, #112	; 0x70
 800225a:	d01a      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0xa2>
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d87b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002260:	2b60      	cmp	r3, #96	; 0x60
 8002262:	d050      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x116>
 8002264:	2b60      	cmp	r3, #96	; 0x60
 8002266:	d877      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002268:	2b50      	cmp	r3, #80	; 0x50
 800226a:	d03c      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0xf6>
 800226c:	2b50      	cmp	r3, #80	; 0x50
 800226e:	d873      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d058      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x136>
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d86f      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002278:	2b30      	cmp	r3, #48	; 0x30
 800227a:	d064      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x156>
 800227c:	2b30      	cmp	r3, #48	; 0x30
 800227e:	d86b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002280:	2b20      	cmp	r3, #32
 8002282:	d060      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x156>
 8002284:	2b20      	cmp	r3, #32
 8002286:	d867      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d05c      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x156>
 800228c:	2b10      	cmp	r3, #16
 800228e:	d05a      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002290:	e062      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f000 f95c 	bl	800255e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	609a      	str	r2, [r3, #8]
      break;
 80022be:	e04e      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f000 f945 	bl	800255e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e2:	609a      	str	r2, [r3, #8]
      break;
 80022e4:	e03b      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f8bc 	bl	8002470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2150      	movs	r1, #80	; 0x50
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f913 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002304:	e02b      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f000 f8da 	bl	80024cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2160      	movs	r1, #96	; 0x60
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f903 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002324:	e01b      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	461a      	mov	r2, r3
 8002334:	f000 f89c 	bl	8002470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f8f3 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 8002344:	e00b      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f000 f8ea 	bl	800252a <TIM_ITRx_SetConfig>
        break;
 8002356:	e002      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002358:	bf00      	nop
 800235a:	e000      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800235c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <TIM_Base_SetConfig+0xa8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <TIM_Base_SetConfig+0x28>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d003      	beq.n	80023e8 <TIM_Base_SetConfig+0x28>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <TIM_Base_SetConfig+0xac>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d108      	bne.n	80023fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <TIM_Base_SetConfig+0xa8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0x52>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0x52>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <TIM_Base_SetConfig+0xac>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <TIM_Base_SetConfig+0xa8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d103      	bne.n	8002458 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	615a      	str	r2, [r3, #20]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400

08002470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0201 	bic.w	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f023 030a 	bic.w	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 0210 	bic.w	r2, r3, #16
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	031b      	lsls	r3, r3, #12
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	f043 0307 	orr.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800255e:	b480      	push	{r7}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4313      	orrs	r3, r2
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	609a      	str	r2, [r3, #8]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e041      	b.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d004      	beq.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10c      	bne.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	4313      	orrs	r3, r2
 800261c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400

0800264c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2600      	movs	r6, #0
 8002674:	4d0c      	ldr	r5, [pc, #48]	; (80026a8 <__libc_init_array+0x38>)
 8002676:	4c0d      	ldr	r4, [pc, #52]	; (80026ac <__libc_init_array+0x3c>)
 8002678:	1b64      	subs	r4, r4, r5
 800267a:	10a4      	asrs	r4, r4, #2
 800267c:	42a6      	cmp	r6, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	f000 f822 	bl	80026c8 <_init>
 8002684:	2600      	movs	r6, #0
 8002686:	4d0a      	ldr	r5, [pc, #40]	; (80026b0 <__libc_init_array+0x40>)
 8002688:	4c0a      	ldr	r4, [pc, #40]	; (80026b4 <__libc_init_array+0x44>)
 800268a:	1b64      	subs	r4, r4, r5
 800268c:	10a4      	asrs	r4, r4, #2
 800268e:	42a6      	cmp	r6, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f855 3b04 	ldr.w	r3, [r5], #4
 8002698:	4798      	blx	r3
 800269a:	3601      	adds	r6, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a2:	4798      	blx	r3
 80026a4:	3601      	adds	r6, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	08002700 	.word	0x08002700
 80026ac:	08002700 	.word	0x08002700
 80026b0:	08002700 	.word	0x08002700
 80026b4:	08002704 	.word	0x08002704

080026b8 <memset>:
 80026b8:	4603      	mov	r3, r0
 80026ba:	4402      	add	r2, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
